import os, sys, re, shutil;
import numpy as np, pandas as pd;
import pyLabbook.core as core;
from pyLabbook.SQLEngines.engine import SQLEngine;
import pyLabbook.SQLEngines.manager as manager; # import SQL engine manager

class pyLabbook:
    """Parental pyLabbook class.  Contains definitions of a labbook's repository, formats, and database.

    Parameters
    ----------
    id : str
        An alpnahumeric (no spaces) id or name for the labbook.
    distributionPath : str
        Full absolute path to the pyLabbook distribution root folder.
    repositoryPath : str
        Full absolute path to the repository folder for this labbook.
    sheetFormat : str
        File format for spreadsheets, currently 'xlsx' or 'csv'.  Default is 'xlsx'.
    databasePath : str
        Full absolute path to the database file (excluding file name).
    databaseFile : str
        Full name of the database file (including extension).
    databaseFormat : str
        Format for the database, currently 'SQLITE3'. Default is 'SQLITE3'.

    """
    def __init__(s,
        id = None,
        root = None,
        repositoryPath = None,
        sheetFormat = 'xlsx',
        databasePath = None,
        databaseFile = None,
        databaseFormat = 'SQLITE3',
    ):
        s.pathmatch = re.compile(r'^[A-Z,a-z,0-9,\-,\_,\\,\/,\.]+$');
        s.filematch = re.compile(r'^[A-Z,a-z,0-9,\-,\_,\.]+$');
        s.root = root;
        s.repositoryPath = repositoryPath;
        s.databasePath = databasePath;
        s.databaseFile = databaseFile;
        s.databaseFormat = databaseFormat;
        s.sheetFormat = sheetFormat;
        s.id = id;

        if s.id==None:
            raise Exception("You must supply a id/name");
        if s.root==None:
            raise Exception("You must supply a root");
        if s.repositoryPath==None:
            raise Exception("You must supply a repositoryPath");
        if s.databasePath==None:
            raise Exception("You must supply a databasePath");
        if s.databaseFile==None:
            raise Exception("You must supply a databaseFile");

        if not s.pathmatch.match(s.root):
            raise Exception("Invalid characters in root " + str(s.root));

    def validate_path(s, path):
        if not s.pathmatch.match(path):
            raise Exception("Invalid characters in " + str(path));
    def validate_file(s, fn):
        if not s.filematch.match(fn):
            raise Exception("Invalid characters in " + str(fn));

    def createFileStructure(s, overwrite=False):
        """Creates the folders needed by this labbook (repositoryPath and databasePath).

        Parameters
        ----------
        overwrite : boolean
            Erase existing structure and replace, if exists

        Returns
        -------
        None
            None.

        """
        s.validate_path( os.path.join(s.root, s.databasePath) );
        s.validate_path( os.path.join(s.root, s.repositoryPath) );
        s.validate_file( s.databaseFile ); # just the name of the file

        if os.path.isdir( os.path.join(s.root, s.repositoryPath) ):
            if overwrite:
                core.rmpath(
                    os.path.join(s.root, s.repositoryPath),
                    require_empty=False
                );
        if os.path.isdir( os.path.join(s.root, s.databasePath) ):
            if overwrite:
                core.rmpath(
                    os.path.join(s.root, s.databasePath),
                    require_empty=False
                );
        if not os.path.isdir( os.path.join(s.root, s.repositoryPath) ):
            core.makepath( os.path.join(s.root, s.repositoryPath) );
        if not os.path.isdir( os.path.join(s.root, s.databasePath) ):
            core.makepath( os.path.join(s.root, s.databasePath) );

    def deleteFileStructure(s, require_empty=True):
        s.validate_path( os.path.join(s.root, s.databasePath) );
        s.validate_path( os.path.join(s.root, s.repositoryPath) );
        s.validate_file( s.databaseFile ); # just the name of the file

        rpath = os.path.join( s.root, s.repositoryPath );
        dfile = os.path.join( s.root, s.databasePath, s.databaseFile );
        if os.path.isdir( rpath ):
            core.rmpath( rpath, require_empty=require_empty );
        if os.path.isfile( dfile ): core.rmfile( dfile );
        return;


    def exportSerialized(s):
        def qqc(v): return "\"" + str(v) + "\",";
        buff = [
            "# pyLabbook specification generated by pyLabbook.py",
            "from pyLabbook import pyLabbook;",
            "def initialize(root):",
            "\tplb = pyLabbook(",
            "\t\tid=" + qqc(s.id),
            "\t\troot=root,",
            "\t\trepositoryPath=" + qqc(s.repositoryPath),
            "\t\tsheetFormat=" + qqc(s.sheetFormat),
            "\t\tdatabasePath=" + qqc(s.databasePath),
            "\t\tdatabaseFile=" + qqc(s.databaseFile),
            "\t\tdatabaseFormat=" + qqc(s.databaseFormat),
            "\t);",
            "\treturn plb;",
        ];
        return("\n".join(buff));
