# pyProtocol specification generated by pyProtocol.py
from pyLabbook import pyProtocol;
import numpy as np, pandas as pd;
class initialize(pyProtocol):
	def setup(s):
		s.PROTOCOLID = "PSEUDOXFR";
		s.addSetColumn(
			name			= "eb_ratio",
			type			= "REAL",
			notnull			= True,
			unique			= False,
			description		= "env:bb ratio",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "env_name",
			type			= "TEXT",
			notnull			= True,
			unique			= False,
			description		= "name of env",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "env_tubeid",
			type			= "TEXT",
			notnull			= False,
			unique			= False,
			description		= "id of env plasmid tube",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "env_conc",
			type			= "REAL",
			notnull			= True,
			unique			= False,
			description		= "concentration of env plasmid",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "env_conc_units",
			type			= "TEXT",
			notnull			= True,
			unique			= False,
			description		= "units for env plasmid concentration",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "bb_name",
			type			= "TEXT",
			notnull			= True,
			unique			= False,
			description		= "name of backbone plasmid",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "bb_tubeid",
			type			= "TEXT",
			notnull			= False,
			unique			= False,
			description		= "id of backbone plasmid tube",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "bb_conc",
			type			= "REAL",
			notnull			= False,
			unique			= False,
			description		= "concentration of backbone plasmid",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "bb_conc_units",
			type			= "TEXT",
			notnull			= True,
			unique			= False,
			description		= "units for backbone plasmid concentration",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "protocol_type",
			type			= "TEXT",
			notnull			= True,
			unique			= False,
			description		= "transfection protocol name or type",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "cell_type",
			type			= "TEXT",
			notnull			= False,
			unique			= False,
			description		= "transfected cell type",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "seed",
			type			= "INTEGER",
			notnull			= False,
			unique			= False,
			description		= "density of cell seed",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "plate_size",
			type			= "TEXT",
			notnull			= False,
			unique			= False,
			description		= "plate format for transfection",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "plate_id",
			type			= "TEXT",
			notnull			= False,
			unique			= False,
			description		= "id of transfected plate where applicable",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "well_id",
			type			= "TEXT",
			notnull			= False,
			unique			= False,
			description		= "id of transfected well where applicable",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "grow_hours",
			type			= "TEXT",
			notnull			= False,
			unique			= False,
			description		= "hours growth before transfection",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "express_hours",
			type			= "TEXT",
			notnull			= False,
			unique			= False,
			description		= "hours after transfection before harvest",
			default			= None,
			primary_key		= False,
		);
		s.addSetColumn(
			name			= "notes",
			type			= "TEXT",
			notnull			= False,
			unique			= False,
			description		= "",
			default			= None,
			primary_key		= False,
		);
		s.addSamColumn(
			name			= "ingredient",
			type			= "TEXT",
			notnull			= True,
			unique			= False,
			description		= "ingredient name (DPBS, BIOT, ENV, BB etc...)",
			default			= None,
			primary_key		= False,
		);
		s.addSamColumn(
			name			= "volume",
			type			= "REAL",
			notnull			= True,
			unique			= False,
			description		= "volume of ingredient in uL",
			default			= None,
			primary_key		= False,
		);
		s.addSamColumn(
			name			= "predilute",
			type			= "REAL",
			notnull			= False,
			unique			= False,
			description		= "pre-dilute ingredient to this concentration (x) first",
			default			= None,
			primary_key		= False,
		);

	############################################################################
	def calculateBioT_TransfectionRecipes(s, sets, dna_mass=10, mix_ul=500,
	biot_ul=15, emass=1500, bmass=8000):
		"""Calculates transfection recipe for all sets supplied.  Calculation
		results can optionally be stored in the sample table (store=True) or
		not (store=False).  Returns a pandas.DataFrame of experiment_id,
		set_id, ingredient, volume and predilute (in units of X) that matches
		sample table results.  Optional parameters can be used to specify
		recipe scale (dna_mass = total ug of DNA, mix_ul = uL of transfection
		mix total, biot_ul = uL of bioT, emass = mass of env, bmass = mass of
		bb)."""

		# calculation definitions
		mt = dna_mass; #total mass of DNA in ug
		vt = mix_ul; # total mix volume in uL
		vbiot = biot_ul; # volume of bioT in uL
		emass = emass; # typical size of env plasmid
		bmass = bmass; # typical size of bb plasmid
		# calculate volumes
		sets['_vol_env'] = \
			sets['env_conc'] * emass * (
				mt / (
					emass + (bmass/sets['eb_ratio'])
				)
			)/1000;
		sets['_vol_bb'] = \
			sets['bb_conc'] * bmass * (
				mt / (
					(emass*sets['eb_ratio']) + bmass
				)
			)/1000;
		sets['_vol_biot'] = vbiot;
		sets['_vol_dpbs'] = vt - sets['_vol_biot'] - sets['_vol_env'] - \
 							sets['_vol_bb'];
		# round all to 2 decimal places
		sets['_vol_env'] = np.round(sets['_vol_env'],2);
		sets['_vol_bb'] = np.round(sets['_vol_bb'],2);
		sets['_vol_biot'] = np.round(sets['_vol_biot'],2);
		sets['_vol_dpbs'] = np.round(sets['_vol_dpbs'],2);
		# arrange into samples
		samrows = [];
		for i,r in sets.iterrows():
			samrows.append( pd.Series({
				'experiment_id'	: r['experiment_id'],
				'set_id'		: r['set_id'],
				'sample_id'		: 1,
				'replicate'		: 1,
				'ingredient'	: 'dpbs_vol',
				'volume'		: r['_vol_dpbs'],
				'predilute'		: None
			}) );
			samrows.append( pd.Series({
				'experiment_id'	: r['experiment_id'],
				'set_id'		: r['set_id'],
				'sample_id'		: 2,
				'replicate'		: 1,
				'ingredient'	: 'bb_vol',
				'volume'		: r['_vol_bb'],
				'predilute'		: None
			}) );
			samrows.append( pd.Series({
				'experiment_id'	: r['experiment_id'],
				'set_id'		: r['set_id'],
				'sample_id'		: 3,
				'replicate'		: 1,
				'ingredient'	: 'env_vol',
				'volume'		: r['_vol_env'],
				'predilute'		: None
			}) );
			samrows.append( pd.Series({
				'experiment_id'	: r['experiment_id'],
				'set_id'		: r['set_id'],
				'sample_id'		: 4,
				'replicate'		: 1,
				'ingredient'	: 'biot_vol',
				'volume'		: r['_vol_biot'],
				'predilute'		: None
			}) );
		sams = pd.DataFrame(samrows);
		return sams;

	def formatBioT_TransfectionRecipes(s, sets):
		"""For a pandas.DataFrame of sets (sets), calculates recipes for two-
		plasmid transfection for viral pseudotyping and formats the recipes
		for printing and use as a guide during transfection protocol.  Returns
		a tuple of (samples pandas.DataFrame, recipes pandas.DataFrame) where
		samples DataFrame is directly insertible into recipe sample table and
		recipes DataFrame is the formatted version for printing."""

		# calculate recipes and get results
		sams = s.calculateBioT_TransfectionRecipes(sets);
		sets['esid'] = sets['experiment_id']+'.'+sets['set_id'];
		sams['esid'] = sams['experiment_id']+'.'+sams['set_id'];

		# format the recipe DataFrame
		all_ingredients = list(sams['ingredient'].unique());
		recipes = []; # recipe rows
		for esid in sets['esid'].unique():
			set_ss = sets[sets['esid']==esid].iloc[0]; #subset Series
			sam_ss = sams[sams['esid']==esid]; # subset DataFrame
			set_ingredients = sam_ss['ingredient'].tolist();
			# initialize recipe row
			rr = pd.Series({
				'experiment_id'		: set_ss['experiment_id'],
				'set_id'			: set_ss['set_id'],
				'env'				: set_ss['env_name'],
				'env_id'			: set_ss['env_tubeid'],
				'bb'				: set_ss['bb_name'],
				'bb_id'				: set_ss['bb_tubeid'],
			});
			# parse out ingredients
			for ing in all_ingredients:
				if ing in sam_ss['ingredient'].values:
					iss = sam_ss[sam_ss['ingredient']==ing].iloc[0];
					rr[ing] = str(iss['volume']);
					if not pd.isnull(iss['predilute']):
						rr[ing] += " (" + str(iss['predilute']) + " X)";
				else:
					rr[ing] = "";
			# add recipe row
			recipes.append(rr);
		return (sams, pd.DataFrame(recipes));
